/**
 *------
 * BGA framework: © Gregory Isabelli <gisabelli@boardgamearena.com> & Emmanuel Colin <ecolin@boardgamearena.com>
 * UnmatchedBattle implementation : © <Your name here> <Your email address here>
 *
 * This code has been produced on the BGA studio platform for use on http://boardgamearena.com.
 * See http://en.boardgamearena.com/#!doc/Studio for more information.
 * -----
 *
 * unmatchedbattle.css
 *
 * UnmatchedBattle stylesheet
 *
 */

/*
    This is the CSS stylesheet of your game User Interface.
    
    Styles defined on this file will be applied to the HTML elements you define in your
    HTML template (unmatchedbattle_unmatchedbattle.tpl), and to HTML elements you create dynamically
    (in unmatchedbattle.js).
    
    Usually, you are using CSS to:
    
    1°) define the overall layout of your game
        (ex: place the board on the top left, place player's hand beside, place the deck on the right, ...).

    2°) create your CSS-sprites:
        All images of your games should be gathered into a small number of image files. Then, using
        background-image and background-position CSS properties, you create HTML blocks that can 
        display these images correctly (see example below).
    
    3°) ... anything else:
        It is really easy to add and remove CSS classes dynamically from your Javascript with
        dojo.addClass and dojo.removeClass. It is also easy to check if an element has a class
        (dojo.hasClass) or to get all elements with a specific class (dojo.query). This is why,
        very often, using CSS classes for the logic of your user interface allow you to do complex
        thing easily.
        
        
     Note: on the production platform, this file will be compressed and comments will be removed.
           Consequently, don't hesitate to put as many comments as necessary.
*/


/* Note: you must not use any @import directive */


/********* You can start writing your CSS below this line: **********/


/*
    Example of CSS sprites (a black token and a white token, 20x20px each, embedded in the same "tokens.png" 40x20px image):

    .white_token {
        background-image: url('img/tokens.png');
        background-position: 0px 0px;
    }
    .black_token {
        background-image: url('img/tokens.png');
        background-position: -20px 0px;
    }
    .token {
        width: 20px;
        height: 20px;
        background-repeat: none;
    }
*/

.mapContainer {
    width: 100%;
    height: 800px;
    overflow: auto;
}

.mapMarmoreal {
    background-image: url('img/Marmoreal.jpg');
    width: 2431px;
    height: 1587px;
    position: relative;
}

.cardContains {
    background-size: contain;
}

.selectionCircle {
    position: absolute;
    height: 220px;
    width: 220px;
    border-radius: 50%;
}


.selectionCircleSelected {
    opacity: 0.5;
    background-color: #b00;
}

.sidekickPoolItem {
    height: 220px;
    width: 220px;
}

.token {
    width: 100%;
    height: 100%;
    background-size: contain;
    z-index: 1;
    border-radius: 50%;
}

.tokenSelected {
    border-radius: 55%;
    border-style: dashed;
    border-color: #b00;
}

.tokenAlice {
    background-image: url('img/Alice.png');
}

.tokenArthur {
    background-image: url('img/Arthur.png');
}

.tokenMedusa {
    background-image: url('img/Medusa.png');
}

.tokenSinbad {
    background-image: url('img/Sinbad.png');
}

.tokenJabberwock {
    background-image: url('img/Jabberwock.png');
}

.tokenMerlin {
    background-image: url('img/Merlin.png');
}

.tokenHarpy {
    background-image: url('img/Harpy.png');
}

.tokenPorter {
    background-image: url('img/Porter.png');
}